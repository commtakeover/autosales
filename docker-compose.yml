services:
  postgres:
    image: postgres:16
    restart: unless-stopped
    env_file:
      - ./.env
    ports:
      - "5432:5432"
    volumes:
      - ./db_data/db:/var/lib/postgresql/data:rw
      - ./wal:/app/wal:rw
    command: >
      sh -c "
        mkdir -p /app/wal/log &&
        chown postgres:postgres /app/wal/log &&
        chmod 755 /app/wal/log &&
        docker-entrypoint.sh postgres
        postgres
          -c wal_level=replica
          -c archive_mode=on
          -c archive_command='test ! -f /app/wal/%f && cp %p /app/wal/%f'
          -c max_wal_senders=3
          -c wal_keep_size=64
          -c log_statement=none
          -c logging_collector=on
          -c log_directory=/app/wal/log
          -c log_filename=postgresql.log
          -c log_rotation_age=1d
          -c log_rotation_size=100MB
          -c listen_addresses='localhost'
          -c password_encryption=scram-sha-256
      "
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U goldy_mc_nugget -d st_vault"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - vireon_network

  server:
    build:
      context: ./server
    restart: unless-stopped
    working_dir: /app/server
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./db:/app/db:ro
      - ./server:/app/server
    env_file:
      - ./.env
    ports:
      - "3001:3001"
    healthcheck:
      test: curl --fail http://localhost:3001/ || exit 1
      interval: 1m
      timeout: 15s
      retries: 5
    networks:
      - vireon_network
    command: ["bun", "run", "--watch", "server.ts"]

  admin_tg_bot:
    build:
      context: ./admin_tg_bot
    restart: unless-stopped
    working_dir: /app/admin_tg_bot
    depends_on:
      postgres:
        condition: service_healthy
      server:
        condition: service_started
    volumes:
      - ./db:/app/db:ro
      - ./admin_tg_bot:/app/admin_tg_bot
    env_file:
      - ./.env
    networks:
      - vireon_network
    command: ["bun", "run", "--watch", "bot.ts"]

  user_tg_bot:
    build:
      context: ./user_tg_bot
    restart: unless-stopped
    working_dir: /app/user_tg_bot
    depends_on:
      postgres:
        condition: service_healthy
      server:
        condition: service_started
    volumes:
      - ./db:/app/db:ro
      - ./user_tg_bot:/app/user_tg_bot
    env_file:
      - ./.env
    networks:
      - vireon_network
    command: ["bun", "run", "--watch", "bot.ts"]

# # DEVELOPMENT
  # web_dashboard:
  #   build:
  #     context: ./web_dashboard
  #     dockerfile: Dockerfile
  #   restart: unless-stopped
  #   depends_on:
  #     server:
  #       condition: service_healthy
  #   ports:
  #     - "3000:4200" # Map host port 4200 to nginx port 80
  #   environment:
  #     - NODE_ENV=production
  #   healthcheck:
  #     test: ["CMD-SHELL", "wget -q --spider http://localhost:80/ || exit 1"]
  #     interval: 1m
  #     timeout: 30s
  #     retries: 3
  #     start_period: 40s
  #   volumes:
  #     - ./web_dashboard/dist/web_dashboard/browser:/usr/share/nginx/html
  #     - ./web_dashboard/nginx.conf:/etc/nginx/nginx.conf
  #     - ./web_dashboard:/app/web_dashboard
  #     - ./db:/app/db:ro
  #   networks:
  #     - vireon_network

# # PRODUCTION
  web_dashboard_prod:
    build:
      context: ./web_dashboard
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    depends_on:
      server:
        condition: service_healthy
    ports:
      - "3000:80"  # Production web dashboard on port 3080
    environment:
      - NODE_ENV=production
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    security_opt:
      - no-new-privileges:true
    networks:
      - vireon_network

volumes:
  db_data:
    external: false

networks:
  vireon_network:
    driver: bridge  

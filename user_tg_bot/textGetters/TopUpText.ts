import { type MyContext } from "../Context.ts";
import { UserRepository } from "../../db/repositories/UserRepository.ts";
import { FormattedString } from "@grammyjs/parse-mode";

export async function getTopUpText(ctx: MyContext, tgId: number): Promise<{ text: string, entities: any[] }> {
    const user = await UserRepository.findByTgId(tgId.toString())
    if (!user) { return { text: "–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —é–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", entities: [] } }
    const formattedString = new FormattedString("ü™ô –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (Litecoin)\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚Äã‚ûñ‚ûñ‚ûñ\nüí≥ –í–∞—à –ª–∏—á–Ω—ã–π –∞–¥—Ä–µ—Å: ").code(user.address_hash).plain("\n\n1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±—É—é —Å—É–º–º—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª—ë–∫\n2Ô∏è‚É£ –ü–ª–∞—Ç—ë–∂ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª–∏—Ç—Å—è –ø–æ—Å–ª–µ 3-—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π\n‚ùï –ü–æ–ø–æ–ª–Ω—è–π—Ç–µ –Ω–∞ 1-3$ –±–æ–ª—å—à–µ –∏–∑ –∑–∞ —Å–∫–∞—á–∫–æ–≤ –∫—É—Ä—Å–∞")
    return {
        text: formattedString.text,
        entities: formattedString.entities
    }
}